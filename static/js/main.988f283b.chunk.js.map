{"version":3,"sources":["features/tasks/TasksPage/Form/styled.js","features/tasks/tasksInLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/Form/useFocus.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParamiters.js","features/tasks/SampleTasks/styled.js","features/tasks/SampleTasks/index.js","features/tasks/TasksPage/index.js","features/author/styled.js","features/author/Author.js","features/tasks/TaskPage/index.js","styled.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","features/tasks/rootSaga.js","store.js","GlobalStyle.js","index.js"],"names":["StyledForm","styled","form","NewTasks","input","StyledButton","button","localStorageKey","setTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","setTasks","selectTasksState","actions","selectTasks","selectHideDone","selectSetEveryTaskDone","every","selectHideDoneTasks","selectAreListEmpty","length","selectLoading","Form","inputRef","useRef","useEffect","current","focus","useFocus","dispatch","useDispatch","useState","newTask","setNewTaskContent","onSubmit","event","preventDefault","trim","content","nanoid","ref","value","onChange","target","type","placeholder","searchQueryParamName","List","ul","Item","li","hidden","css","red","green","Content","span","StyledLink","Link","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","StyledButtons","div","Button","Buttons","setEveryTasksDone","hideDoneTasks","areListEmpty","disabled","StyledSection","section","StyledHeader","h2","Section","title","body","extraHeaderContent","Header","StyledMain","main","Container","children","StyledSearch","TaskSearch","Search","params","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","key","undefined","delete","set","pathname","toString","useReplaceQueryParamiter","SampleTasks","TasksPage","Author","TaskPage","useParams","taskId","find","getTaskById","StyledList","StyledNavLink","NavLink","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHendler","saveTasksInLocalStorageHendler","tasksSaga","delay","call","exampleTasls","put","alert","select","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.988f283b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 15px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 15px;\r\n\r\n    @media (max-width: 600px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const NewTasks = styled.input`\r\n    border: 1px solid rgb(238, 237, 239);\r\n    padding: 10px;\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    background-color: rgb(0, 115, 131);\r\n\r\n    &:hover{\r\n        transform: scale(1.1);\r\n        background-color: rgba(0, 116, 131, 0.788);\r\n    }\r\n\r\n    &:active{\r\n        background-color: rgb(14, 104, 116);\r\n        color: rgb(173, 173, 173);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const setTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksInLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(index, 1)\r\n        },\r\n        setAllDone: (state) => {\r\n            for (const task of state.tasks) {\r\n                task.done = true\r\n            }\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.loading = true\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false\r\n        },\r\n    },\r\n});\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone, fetchExampleTasks, setTasks } = tasksSlice.actions;\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectSetEveryTaskDone = state => selectTasksState(state).tasks.every(({ done }) => done);\r\nexport const selectHideDoneTasks = state => selectTasksState(state).tasks.every(({ done }) => !done);\r\nexport const selectAreListEmpty = state => selectTasksState(state).tasks.length > 0;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state)\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()))\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import { useState } from \"react\";\r\nimport { StyledForm, NewTasks, StyledButton } from \"./styled\"\r\nimport { useFocus } from \"./useFocus\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const { inputRef } = useFocus();\r\n    const dispatch = useDispatch();\r\n    const [newTask, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        setNewTaskContent(\"\")\r\n\r\n        if (newTask.trim() !== \"\") {\r\n            return dispatch(addTask({\r\n                content: newTask,\r\n                done: false,\r\n                id: nanoid(),\r\n            }))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <NewTasks ref={inputRef} value={newTask} onChange={(event) => setNewTaskContent(event.target.value)} type=\"text\" placeholder=\"Co jest do zrobienia?\" />\r\n            <StyledButton>\r\n                Dodaj zadanie\r\n            </StyledButton>\r\n        </StyledForm>\r\n    );\r\n}\r\n\r\nexport default Form;","import { useRef, useEffect } from \"react\";\r\n\r\nexport const useFocus = () => {\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n    return { inputRef };\r\n};","const searchQueryParamName = () =>{\r\n    \"szukaj\"\r\n}\r\nexport default searchQueryParamName;","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    margin: 0px;\r\n    padding: 10px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: 25px 1fr 25px;\r\n    list-style-type: none;\r\n    border-bottom: 1px solid rgb(238, 237, 239);\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    color: white;\r\n    border: none;\r\n\r\n    ${({ red }) => red && css`\r\n        height: 30px;\r\n        width: 30px;\r\n        background-color: red;\r\n\r\n        &:hover {\r\n            background-color: rgba(255, 0, 0, 0.500);\r\n        }\r\n    `}\r\n\r\n    ${({ green }) => green && css`\r\n        height: 30px;\r\n        width: 30px;\r\n        font-size: 17px;\r\n        background-color: green;\r\n\r\n        &:hover {\r\n            background-color: rgba(0, 128, 0, 0.500);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    justify-self: start;\r\n    align-self: center;\r\n    padding-left: 10px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: rgb(0, 115, 131);\r\n    &:hover{\r\n        font-weight: 500\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport {  useLocation } from \"react-router-dom\";\r\nimport { selectHideDone, toggleTaskDone, removeTask, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { List, Item, StyledButton, Content, StyledLink } from \"./styled\"\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <StyledButton green onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </StyledButton>\r\n          <Content done={task.done}>\r\n            <StyledLink to={`/zadania/${task.id}`}>{task.content}</StyledLink>\r\n          </Content>\r\n          <StyledButton red onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑\r\n          </StyledButton>\r\n        </Item>))}\r\n    </List>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n\r\n    @media (max-width: 600px) {\r\n        padding: 20px;\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: rgb(0, 115, 131);\r\n\r\n    &:hover{\r\n        background-color: transparent;\r\n        color: rgba(0, 116, 131, 0.500);\r\n    }\r\n\r\n    &:disabled{\r\n        color: rgb(119, 119, 119);\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { StyledButtons, Button } from \"./styled\";\r\nimport { selectHideDone, toggleHideDone, setAllDone, selectSetEveryTaskDone, selectHideDoneTasks, selectAreListEmpty } from \"../../tasksSlice\"\r\n\r\nconst Buttons = () => {\r\n  const dispatch = useDispatch();\r\n  const hideDone = useSelector(selectHideDone);\r\n  const setEveryTasksDone = useSelector(selectSetEveryTaskDone);\r\n  const hideDoneTasks = useSelector(selectHideDoneTasks);\r\n  const areListEmpty = useSelector(selectAreListEmpty);\r\n\r\n  return (\r\n    <StyledButtons>\r\n      {areListEmpty && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={hideDoneTasks}\r\n          >\r\n            {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={setEveryTasksDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </StyledButtons>\r\n  )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: white;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const StyledHeader = styled.h2`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    font-size: 20px;\r\n    margin: 0px;\r\n    padding: 15px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n\r\n    @media (max-width: 600px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;","import { StyledSection, StyledHeader } from \"./styled\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <StyledHeader>{title}\r\n            {extraHeaderContent}\r\n        </StyledHeader>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    @media(max-width: 939px) {\r\n        margin: 0px 20px;\r\n    }\r\n`;","import { StyledMain } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledMain>\r\n        {children}\r\n    </StyledMain>\r\n)\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const StyledSearch = styled.form`\r\n    padding: 15px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 15px;\r\n\r\n    @media (max-width: 600px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const TaskSearch = styled.input`\r\n    border: 1px solid rgb(238, 237, 239);\r\n    padding: 10px;\r\n`;","import searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParamiter } from \"../queryParamiters\";\r\nimport { TaskSearch, StyledSearch } from \"./styled\"\r\n\r\nconst Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParamiter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StyledSearch>\r\n      <TaskSearch placeholder=\"Filtruj zadania\" value={query || \"\"} onChange={onInputChange} />\r\n    </StyledSearch>\r\n  );\r\n}\r\n\r\nexport default Search;","import { useHistory, useLocation } from \"react-router\";\r\n\r\nexport const useQueryParameter = (params) => {\r\n    const location = useLocation();\r\n    return (new URLSearchParams(location.search)).get(params);\r\n};\r\n\r\nexport const useReplaceQueryParamiter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    const replace = ({ key, value }) => {\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n        history.push(`${location.pathname}?${searchParams.toString()}`)\r\n    }\r\n    return replace;\r\n};\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n\r\n    @media (max-width: 600px) {\r\n        padding: 20px;\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: rgb(0, 115, 131);\r\n\r\n    &:hover{\r\n        background-color: transparent;\r\n        color: rgba(0, 116, 131, 0.500);\r\n    }\r\n\r\n    &:disabled{\r\n        color: rgb(119, 119, 119);\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../tasksSlice\";\r\nimport { Button, StyledButtons } from \"./styled\";\r\n\r\nconst SampleTasks = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading)\r\n\r\n    return (\r\n        <StyledButtons>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                {loading ? \"Ładowanie...\" : \"Pobierz przykłądowe zadania\"}\r\n            </Button>\r\n        </StyledButtons>\r\n    )\r\n};\r\n\r\nexport default SampleTasks;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\nimport SampleTasks from \"../SampleTasks\";\r\n\r\nfunction TasksPage() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        title=\"Lista zadań\"\r\n      />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={<SampleTasks />}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: white;\r\n    padding: 15px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n    \r\n`;","import Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport { StyledSection } from \"./styled\";\r\n\r\nfunction Author() {\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"O autorz\" />\r\n            <Section\r\n                title=\"Olaf Tarkowski\"\r\n                body={<>\r\n                    <StyledSection>\r\n                        <p><strong>Cześć, Olaf z tej strony.</strong></p>Skono znajdujesz się w tej zakładce to oznacza że chciał byś się o mnie dowiedzieć.\r\n                        Pochodzę z Lublina, mam 24 lata i wpaniałego kotka Dodzie. Interesuję się motoryzacją i wszelkiego rodzaju sportami.\r\n\r\n                    </StyledSection></>}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Author;","import { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport Container from \"../../../common/Container\";\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport { StyledHeader } from \"../../../common/Section/styled\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Szczegóły zadania\"\r\n            />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={<>\r\n                    <StyledHeader>\r\n                        Ukończone: {task ? task.done ? \"Tak\" : \"Nie\" : \"Brak wyników\"}\r\n                    </StyledHeader></>}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default TaskPage;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const StyledList = styled.ul`\r\n    margin: 0px;\r\n    padding: 0px;\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color:rgb(0, 115, 131);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    list-style: none;\r\n`;\r\nexport const StyledNavLink = styled(NavLink)`\r\n    padding: 15px;\r\n    text-decoration: none;\r\n    color: white;\r\n    &.active{\r\n        font-weight: 700\r\n    }\r\n    &:hover{\r\n        text-decoration: underline;\r\n    }\r\n`;","import { Switch, Route, Redirect, HashRouter } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\"\r\nimport Author from \"./features/author/Author\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport { StyledList, StyledNavLink } from \"./styled\";\r\n\r\nconst App = () => (\r\n    <HashRouter>\r\n        <nav>\r\n            <StyledList>\r\n                <li><StyledNavLink to=\"/zadania\">Lista zadań</StyledNavLink></li>\r\n                <li><StyledNavLink to=\"/autor\">O autorze</StyledNavLink></li>\r\n            </StyledList>\r\n        </nav>\r\n        <Switch>\r\n            <Route path=\"/zadania/:id\">\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path=\"/zadania\">\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path=\"/autor\">\r\n                <Author />\r\n            </Route>\r\n            <Redirect to=\"/zadania\" />\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\")\r\n\r\n    if (!response.ok) {\r\n        throw new Error(response.statusText)\r\n    }\r\n    return await response.json();\r\n};","import { takeEvery, call, put, delay, select} from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { setTasksInLocalStorage } from \"./tasksInLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, setTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHendler() {\r\n    try{\r\n        yield delay(1_000);\r\n        const exampleTasls = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasls));\r\n    }catch(error){\r\n        yield call(alert, \"Coś nie poszło zgodnie z oczekiwaniami\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHendler() {\r\n        const tasks = yield select(selectTasks)\r\n        yield call(setTasksInLocalStorage, tasks)\r\n};\r\n\r\nexport function* tasksSaga() {\r\n        yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHendler);\r\n        yield takeEvery(\"*\", saveTasksInLocalStorageHendler);\r\n    }","import {all} from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\"\r\nimport rootSaga from \"./features/tasks/rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","\nimport { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n  box-sizing: border-box;\n}\n\n*, ::after, ::before {\n  box-sizing: inherit;\n}\n\nbody {\n  background-color: rgb(238, 237, 239);\n  margin: auto;\n  font-family: 'Montserrat', sans-serif;\n}\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from './GlobalStyle.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}