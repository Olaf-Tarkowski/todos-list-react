{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/Form/useFocus.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["StyledForm","styled","form","NewTasks","input","StyledButton","button","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","actions","selectTasks","Form","inputRef","useRef","useEffect","current","focus","useFocus","dispatch","useDispatch","useState","newTask","setNewTaskContent","onSubmit","event","preventDefault","trim","content","nanoid","ref","value","onChange","target","type","placeholder","List","ul","Item","li","hidden","css","red","green","Content","span","TaskList","useSelector","map","onClick","StyledButtons","div","Button","Buttons","length","disabled","every","StyledSection","section","StyledHeader","h2","Section","title","body","extraHeaderContent","Header","StyledMain","main","Container","children","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById"],"mappings":"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","file":"static/js/main.969f747f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 15px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 15px;\r\n\r\n    @media (max-width: 600px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const NewTasks = styled.input`\r\n    border: 1px solid rgb(238, 237, 239);\r\n    padding: 10px;\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    background-color: rgb(0, 115, 131);\r\n\r\n    &:hover{\r\n        transform: scale(1.1);\r\n        background-color: rgba(0, 116, 131, 0.788);\r\n    }\r\n\r\n    &:active{\r\n        background-color: rgb(14, 104, 116);\r\n        color: rgb(173, 173, 173);\r\n    }\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done;\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(index, 1)\r\n        },\r\n        setAllDone: (state) => {\r\n            for (const task of state.tasks) {\r\n                task.done = true\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import { useState } from \"react\";\r\nimport { StyledForm, NewTasks, StyledButton } from \"./styled\"\r\nimport { useFocus } from \"./useFocus\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const { inputRef } = useFocus();\r\n    const dispatch = useDispatch();\r\n    const [newTask, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        setNewTaskContent(\"\")\r\n\r\n        if (newTask.trim() !== \"\") {\r\n            return dispatch(addTask({\r\n                content: newTask,\r\n                done: false,\r\n                id: nanoid(),\r\n            }))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <NewTasks ref={inputRef} value={newTask} onChange={(event) => setNewTaskContent(event.target.value)} type=\"text\" placeholder=\"Co jest do zrobienia?\" />\r\n            <StyledButton>\r\n                Dodaj zadanie\r\n            </StyledButton>\r\n        </StyledForm>\r\n    );\r\n}\r\n\r\nexport default Form;","import { useRef, useEffect } from \"react\";\r\n\r\nexport const useFocus = () => {\r\n    const inputRef = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n    return { inputRef };\r\n};","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    margin: 0px;\r\n    padding: 10px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: 25px 1fr 25px;\r\n    list-style-type: none;\r\n    border-bottom: 1px solid rgb(238, 237, 239);\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    color: white;\r\n    border: none;\r\n\r\n    ${({ red }) => red && css`\r\n        height: 30px;\r\n        width: 30px;\r\n        background-color: red;\r\n\r\n        &:hover {\r\n            background-color: rgba(255, 0, 0, 0.500);\r\n        }\r\n    `}\r\n\r\n    ${({ green }) => green && css`\r\n        height: 30px;\r\n        width: 30px;\r\n        font-size: 17px;\r\n        background-color: green;\r\n\r\n        &:hover {\r\n            background-color: rgba(0, 128, 0, 0.500);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    justify-self: start;\r\n    align-self: center;\r\n    padding-left: 10px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, StyledButton, Content } from \"./styled\"\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks)\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <StyledButton green onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </StyledButton>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <StyledButton red onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑\r\n          </StyledButton>\r\n        </Item>))}\r\n    </List>\r\n  )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n\r\n    @media (max-width: 600px) {\r\n        padding: 20px;\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        grid-gap: 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    font-size: 17px;\r\n    transition: 0.5s;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: rgb(0, 115, 131);\r\n\r\n    &:hover{\r\n        background-color: transparent;\r\n        color: rgba(0, 116, 131, 0.500);\r\n    }\r\n\r\n    &:disabled{\r\n        color: rgb(119, 119, 119);\r\n    }\r\n`;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { StyledButtons, Button } from \"./styled\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\"\r\n\r\nconst Buttons = () => {\r\n  const dispatch = useDispatch();\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  return (\r\n    <StyledButtons>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n            disabled={tasks.every(({ done }) => !done)}\r\n          >\r\n            {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={tasks.every(({ done }) => done)}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </StyledButtons>\r\n  )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: white;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const StyledHeader = styled.h2`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    font-size: 20px;\r\n    margin: 0px;\r\n    padding: 15px;\r\n    border: 1px solid rgb(238, 237, 239);\r\n\r\n    @media (max-width: 600px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;","import { StyledSection, StyledHeader } from \"./styled\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <StyledHeader>{title}\r\n            {extraHeaderContent}\r\n        </StyledHeader>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n    max-width: 1050px;\r\n    margin: 0 auto;\r\n`;","import { StyledMain } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledMain>\r\n        {children}\r\n    </StyledMain>\r\n)\r\nexport default Container;","import Form from \"../../features/tasks/Form\";\r\nimport TaskList from \"../../features/tasks/TaskList\";\r\nimport Buttons from \"../../features/tasks/Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\n\r\n\r\nfunction Tasks() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        title=\"Lista zadań\"\r\n      />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;","import Tasks from \"./features/tasks/Tasks\"\r\n\r\nexport default () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\"\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}